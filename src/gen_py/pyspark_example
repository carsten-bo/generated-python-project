from pyspark.sql.functions import col, lead, to_timestamp
from pyspark.sql.types import StructType, StructField, StringType, TimestampType
import pyspark.sql.functions as F
from pyspark.sql import Window as window

user_clicks = spark.createDataFrame([
    ("user_1", "2024-06-16 10:00:00", "product_page_1"),
    ("user_1", "2024-06-18 10:00:00", "product_page_1"),
    ("user_1", "2024-06-18 10:05:00", "cart_page"),
    ("user_1", "2024-06-18 10:10:00", "checkout_page"),
    ("user_2", "2024-06-18 11:00:00", "product_page_2"),
    ("user_2", "2024-06-18 11:02:00", "help_page"),
    ("user_3", "2024-06-18 09:55:00", "product_page_3"),
], ["user_id", "timestamp", "url"])

user_clicks = user_clicks.withColumn("timestamp", to_timestamp("timestamp"))

filtered_clicks = user_clicks.filter(F.date_format(col("timestamp"), 'yyyy-MM-dd') == '2024-06-18')

window_spec = window.partitionBy("user_id").orderBy("timestamp")
next_clicks = filtered_clicks.withColumn("next_url", lead("url").over(window_spec))

enriched_clicks = (
    filtered_clicks.alias("fc")
    .join(
        next_clicks.alias("nc"),
        (F.col("fc.user_id") == F.col("nc.user_id"))
        & (F.col("fc.timestamp") < F.col("nc.timestamp")),
        "left",
    )
    .select("fc.user_id", "fc.timestamp", "fc.url", "nc.next_url", F.col("nc.timestamp").alias("next_timestamp"))
)
valid_sessions = enriched_clicks.filter(col("next_url").isNotNull())

valid_sessions = valid_sessions.withColumn(
    "session_duration", col("next_timestamp") - col("timestamp")
)

user_clicks.write.format("parquet").partitionBy("user_id").save("s3://prd-user-data/user_sessions/")
